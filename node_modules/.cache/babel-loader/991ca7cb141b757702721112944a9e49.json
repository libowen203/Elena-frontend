{"ast":null,"code":"var _jsxFileName = \"/Users/Faith/Downloads/ELeNa/elena-frontend/src/SearchBar.js\";\nimport React from \"react\";\nimport { Button } from 'react-bootstrap';\nimport AlgorithmMenu from './AlgorithmMenu';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      const uri = new URL(\"http://localhost:8080/search\");\n      uri.searchParams.append(\"from\", this.state.from);\n      uri.searchParams.append(\"to\", this.state.to);\n      uri.searchParams.append(\"algorithm\", this.state.algorithm);\n      uri.searchParams.append(\"elemode\", this.state.elevation);\n      uri.searchParams.append(\"percentage\", this.state.percentage);\n      this.setState({\n        loading: true\n      });\n      fetch(uri.href).then(response => {\n        return response.json();\n      }).then(data => {\n        this.props.onGetRoute(data);\n        this.setState({\n          loading: false\n        });\n      }).catch(error => alert(\"something went wrong\"));\n    };\n\n    this.requestForOptions = (name, type) => {\n      const uri = new URL(\"http://localhost:8080/autocomplete\");\n      uri.searchParams.append(\"name\", name);\n      fetch(uri.href).then(response => {\n        return response.json();\n      }).then(data => {\n        if (type === \"from\") {\n          this.setState({\n            fromLocationNames: data.values\n          });\n        } else {\n          this.setState({\n            toLocationNames: data.values\n          });\n        }\n      });\n    };\n\n    this.changeHandler = (event, event_value) => {\n      const name = event.target.id.split(\"-\")[0];\n      const value = event_value ? event_value : event.target.value;\n      this.setState({\n        [name]: value\n      }, () => {\n        if (name === \"from\" && this.state.from.length === 2) {\n          this.requestForOptions(this.state.from, \"from\");\n        } else if (name === \"from\" && this.state.from.length === 0) {\n          this.setState({\n            fromLocationNames: []\n          });\n        } else if (name === \"to\" && this.state.to.length === 2) {\n          this.requestForOptions(this.state.to, \"to\");\n        } else if (name === \"to\" && this.state.to.length === 0) {\n          this.setState({\n            toLocationNames: []\n          });\n        }\n      });\n    };\n\n    this.algoMenuSelectHandler = selection => {\n      this.setState({\n        [selection.key]: selection.value\n      });\n    };\n\n    this.useStyles = makeStyles(theme => ({\n      root: {\n        '& .MuiTextField-root': {\n          margin: theme.spacing(1),\n          width: 200\n        }\n      }\n    }));\n    this.state = {\n      from: \"\",\n      to: \"\",\n      percentage: \"100\",\n      algorithm: \"A_STAR_MULTIROUTES\",\n      elevation: \"MIN\",\n      fromLocationNames: [],\n      toLocationNames: [],\n      loading: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      className: this.useStyles.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"search_form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      freeSolo: true,\n      options: this.state.fromLocationNames.map(option => option.name),\n      id: \"from\",\n      onChange: this.changeHandler,\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        label: \"Origin\",\n        margin: \"normal\",\n        variant: \"filled\",\n        onChange: this.changeHandler,\n        InputProps: { ...params.InputProps,\n          type: 'from_search'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 16\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Autocomplete, {\n      freeSolo: true,\n      options: this.state.toLocationNames.map(option => option.name),\n      id: \"to\",\n      onChange: this.changeHandler,\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        label: \"Destination\",\n        margin: \"normal\",\n        variant: \"filled\",\n        onChange: this.changeHandler,\n        InputProps: { ...params.InputProps,\n          type: 'to_search'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 17\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      label: \"Shortest Path%\",\n      margin: \"normal\",\n      variant: \"filled\",\n      onChange: this.changeHandler,\n      id: \"percentage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(AlgorithmMenu, {\n      onSelect: this.algoMenuSelectHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pad_top\",\n      id: \"submit_button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"outline-secondary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }\n    }, \"Search\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading_spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, this.state.loading && /*#__PURE__*/React.createElement(CircularProgress, {\n      size: 60,\n      color: \"#85929E\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 38\n      }\n    }))));\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/Faith/Downloads/ELeNa/elena-frontend/src/SearchBar.js"],"names":["React","Button","AlgorithmMenu","TextField","Autocomplete","makeStyles","CircularProgress","SearchBar","Component","constructor","props","submitHandler","event","preventDefault","uri","URL","searchParams","append","state","from","to","algorithm","elevation","percentage","setState","loading","fetch","href","then","response","json","data","onGetRoute","catch","error","alert","requestForOptions","name","type","fromLocationNames","values","toLocationNames","changeHandler","event_value","target","id","split","value","length","algoMenuSelectHandler","selection","key","useStyles","theme","root","margin","spacing","width","render","map","option","params","InputProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Button } from 'react-bootstrap'\nimport AlgorithmMenu from './AlgorithmMenu'\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nclass SearchBar extends React.Component{\n\n  constructor(props){\n    super(props);\n\n\n    this.useStyles = makeStyles((theme) => ({\n      root: {\n        '& .MuiTextField-root': {\n          margin: theme.spacing(1),\n          width: 200,\n        },\n      },\n    }));\n\n    this.state = {\n      from : \"\",\n      to : \"\",\n      percentage: \"100\",\n      algorithm: \"A_STAR_MULTIROUTES\",\n      elevation: \"MIN\",\n      fromLocationNames: [],\n      toLocationNames: [],\n      loading:false\n    }\n  }\n\n  submitHandler = (event) =>{\n    event.preventDefault();\n    const uri = new URL(\"http://localhost:8080/search\");\n    uri.searchParams.append(\"from\", this.state.from);\n    uri.searchParams.append(\"to\", this.state.to);\n    uri.searchParams.append(\"algorithm\", this.state.algorithm);\n    uri.searchParams.append(\"elemode\", this.state.elevation);\n    uri.searchParams.append(\"percentage\", this.state.percentage);\n    this.setState({loading:true});\n\n    fetch(uri.href)\n      .then(response =>  {return response.json()})\n      .then(data => {\n        this.props.onGetRoute(data);\n        this.setState({loading:false});\n      })\n      .catch(error => alert(\"something went wrong\"))\n  }\n\n   requestForOptions = (name, type) => {\n    const uri = new URL(\"http://localhost:8080/autocomplete\");\n    uri.searchParams.append(\"name\", name);\n\n    fetch(uri.href)\n      .then(response => { return response.json()} )\n      .then(data =>{\n        if(type === \"from\"){\n          this.setState({fromLocationNames: data.values})\n        }\n        else{\n          this.setState({toLocationNames: data.values})\n        }\n      })\n  }\n\n  changeHandler = (event, event_value) =>{\n    const name = event.target.id.split(\"-\")[0]\n    const value = event_value?  event_value : event.target.value\n\n    this.setState({\n      [name]: value,\n    }, () => {\n      if(name === \"from\" && this.state.from.length === 2){\n          this.requestForOptions(this.state.from, \"from\")\n        }\n      else if (name === \"from\" && this.state.from.length === 0) {\n        this.setState({fromLocationNames:[]})\n      }\n      else if((name === \"to\" && this.state.to.length === 2)){\n        this.requestForOptions(this.state.to, \"to\")\n      }\n      else if((name === \"to\" && this.state.to.length === 0)){\n        this.setState({toLocationNames:[]})\n      }\n      });\n\n  }\n\n\n  algoMenuSelectHandler = (selection) =>{\n    this.setState({[selection.key]:selection.value})\n  }\n\n  render(){\n    return (\n\n      <form onSubmit={this.submitHandler} className={this.useStyles.root} >\n        <div id=\"search_form\">\n          <Autocomplete\n             freeSolo\n             options={this.state.fromLocationNames.map((option) => option.name)}\n             id=\"from\"\n             onChange={this.changeHandler}\n             renderInput={(params) => (\n               <TextField\n                 {...params}\n                 label=\"Origin\"\n                 margin=\"normal\"\n                 variant=\"filled\"\n                 onChange={this.changeHandler}\n                 InputProps={{ ...params.InputProps, type: 'from_search' }}\n               />\n             )}\n           />\n            <Autocomplete\n              freeSolo\n              options={this.state.toLocationNames.map((option)=>option.name)}\n              id=\"to\"\n              onChange={this.changeHandler}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Destination\"\n                  margin=\"normal\"\n                  variant=\"filled\"\n                  onChange={this.changeHandler}\n                  InputProps={{ ...params.InputProps, type: 'to_search'}}\n                />\n              )}\n            />\n            <TextField\n              label=\"Shortest Path%\"\n              margin=\"normal\"\n              variant=\"filled\"\n              onChange={this.changeHandler}\n              id=\"percentage\"\n            />\n            <AlgorithmMenu onSelect={this.algoMenuSelectHandler}/>\n            <div className=\"pad_top\" id=\"submit_button\">\n              <Button variant=\"outline-secondary\" type=\"submit\">Search</Button>\n            </div>\n            <div className=\"loading_spinner\">\n              {this.state.loading && <CircularProgress size={60} color=\"#85929E\"/>}\n            </div>\n        </div>\n\n      </form>\n    );\n  }\n}\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}